#=============================================================================
#
#  Copyright (c) Kitware, Inc.
#  All rights reserved.
#  See LICENSE.txt for details.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even
#  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#  PURPOSE.  See the above copyright notice for more information.
#
#=============================================================================
import os
print 'loading', os.path.basename(__file__)

import smtk

# ---------------------------------------------------------------------
class Writer2D:
  '''Top level writer class for IBAMR input files (2D)
  '''

# ---------------------------------------------------------------------
  def __init__(self, export_spec):
    '''
    '''
    # Member data
    self.component_sequence = None
    self.export_spec_att = None
    self.format_table = None
    self.sim_atts = None

    # Initialize
    self.sim_atts = export_spec.getSimulationAttributes()
    print 'sim_atts', self.sim_atts

    # Get export attribute
    export_atts = export_spec.getExportAttributes()
    if not export_atts:
      raise Exception('ERROR: Missing Export Attribute Manager')

    att_list = export_atts.findAttributes('ExportSpec')
    if not att_list:
      raise Exception('ERROR: Missing ExportSpec attribute')

    self.export_spec_att = att_list[0]

# ---------------------------------------------------------------------
  def write(self, component_sequence, format_table):
    '''
    '''
    self.component_sequence = component_sequence
    self.format_table = format_table

    # Get output filename/path
    filename_item = self.export_spec_att.findFile('OutputFile')
    if not filename_item:
      raise Exception('ERROR: ExportSpec attribute missing OutputFile item')

    output_filename = filename_item.value(0)
    if not output_filename:
      output_filename = 'output.ibamr'
      msg = 'No output file specified; using \"%s\"' % output_filename
      print 'WARNING:', msg
      logger.addWarning(msg)
    print 'output filename', output_filename

    completed = False
    with open(output_filename, 'w') as out:
      out.write('// Generated by CMB\n')
      self.out = out

      for component in self.component_sequence:
        format_list = self.format_table.get(component.name)

        # Components can assign custom method
        if component.custom_method is not None:
          if not hasattr(self, component.custom_method):
            print 'ERROR: For component', component.name, \
              ', custom_method', component.custom_method, \
              'not found'
          else:
            method = getattr(self, component.custom_method)
            method(out, component, format_list)
          continue

        # Else use the default component writer
        else:
          self.write_component_default(out, component, format_list)

      completed = True
      print 'Wrote output file %s' % output_filename
    return completed

# ---------------------------------------------------------------------
  def write_component_default(self, out, component, format_list):
    '''
    '''
    print 'Writing component', component.name
    self.begin_component(out, component)

    for card in format_list:
      att_list = self.sim_atts.findAttributes(card.att_type)
      for att in att_list:
        card.write(out, att)

    self.end_component(out)

# ---------------------------------------------------------------------
  def begin_component(self, out, component):
    out.write('\n')
    out.write('%s {' % component.name)
    out.write('\n')

# ---------------------------------------------------------------------
  def end_component(self, out):
    out.write('}\n')
